const express = require("express");
const router = express.Router();
const auth = require("../middleware/authMiddleware");
const Template = require("../models/Template");
const Question = require("../models/Question");
const User = require("../models/User");
const Form = require("../models/Form");
const checkOwner = require("../middleware/checkOwnership");
// üîê –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω (—Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
router.post("/", auth.required, async (req, res) => {
  const { title, description, category, imageUrl, tags, questions } = req.body;

  if (!title || !Array.isArray(questions)) {
    return res
      .status(400)
      .json({ message: "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å title –∏ –º–∞—Å—Å–∏–≤ questions" });
  }

  const typeCount = { text: 0, textarea: 0, number: 0, checkbox: 0 };
  for (let q of questions) {
    if (!q.type || !q.text) {
      return res
        .status(400)
        .json({ message: "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–µ–∫—Å—Ç –∏ —Ç–∏–ø" });
    }
    if (typeCount[q.type] !== undefined) typeCount[q.type]++;
  }
  for (let t in typeCount) {
    if (typeCount[t] > 4) {
      return res
        .status(400)
        .json({ message: `–ú–∞–∫—Å–∏–º—É–º 4 –≤–æ–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ "${t}"` });
    }
  }

  try {
    const template = await Template.create({
      title,
      description,
      category,
      imageUrl,
      tags,
      userId: req.user.id,
    });

    const enrichedQuestions = questions.map((q, i) => ({
      ...q,
      order: i,
      templateId: template.id,
    }));

    await Question.bulkCreate(enrichedQuestions);

    res.status(201).json({ templateId: template.id });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞" });
  }
});

// üîì –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
router.get("/", async (req, res) => {
  try {
    const { limit } = req.query;
    const queryOptions = {
      include: [
        { model: User, attributes: ["username"] },
        {
          model: Question,
          attributes: ["id", "text", "type", "options", "order"],
        },
      ],
      order: [["createdAt", "DESC"]],
    };
    if (limit) queryOptions.limit = parseInt(limit);
    const templates = await Template.findAll({
      include: [
        { model: User, attributes: ["username"] },
        {
          model: Question,
          attributes: ["id", "text", "type", "options", "order"],
        },
      ],
      order: [["createdAt", "DESC"]],
    });
    res.json(templates);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤" });
  }
});

router.get("/top", async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã + —Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º —É –∫–∞–∂–¥–æ–≥–æ
    const templates = await Template.findAll({
      include: [{ model: Form, attributes: ["id"] }],
    });

    const top = templates
      .map((tpl) => ({
        id: tpl.id,
        title: tpl.title,
        formCount: tpl.Forms.length,
      }))
      .sort((a, b) => b.formCount - a.formCount)
      .slice(0, 5);

    res.json(top);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤" });
  }
});
// üîì –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –ø–æ ID
router.get("/:id", async (req, res) => {
  try {
    const template = await Template.findByPk(req.params.id, {
      include: [
        { model: User, attributes: ["username", "id"] },
        {
          model: Question,
          attributes: ["id", "text", "type", "options", "order"],
        },
      ],
      order: [[Question, "order", "ASC"]],
    });

    if (!template) {
      return res.status(404).json({ message: "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(template);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞" });
  }
});

router.put("/:id", auth.required, checkOwner(Template), async (req, res) => {
  try {
    const { title, questions = [] } = req.body;

    // 1. –ù–∞–π–¥—ë–º —à–∞–±–ª–æ–Ω
    const template = await Template.findByPk(req.params.id, {
      include: [Question],
    });

    if (!template) return res.status(404).json({ message: "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    // 2. –û–±–Ω–æ–≤–∏–º –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞
    await template.update({ title });

    // 3. –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    const existingIds = template.Questions.map((q) => q.id);

    for (const q of questions) {
      if (q.id && existingIds.includes(q.id)) {
        // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        await Question.update(
          { text: q.text, type: q.type },
          { where: { id: q.id } }
        );
      } else {
        // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
        await Question.create({
          text: q.text,
          type: q.type,
          templateId: template.id,
        });
      }
    }

    // 4. –£–¥–∞–ª–∏–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const newIds = questions.filter((q) => q.id).map((q) => q.id);
    const toDelete = existingIds.filter((id) => !newIds.includes(id));

    await Question.destroy({ where: { id: toDelete } });

    res.json({ message: "–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" });
  }
});
router.delete("/:id", auth.required, checkOwner(Template), async (req, res) => {
  try {
    // await Form.destroy({ where: { templateId: req.params.id } }); // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º
    await Template.destroy({ where: { id: req.params.id } });
    res.json({ message: "–®–∞–±–ª–æ–Ω —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
  }
});

router.patch(
  "/:id/questions",
  auth.required,
  checkOwner(Template),
  async (req, res) => {
    try {
      const { questions } = req.body;

      if (!Array.isArray(questions))
        return res
          .status(400)
          .json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤" });

      const templateId = req.params.id;

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
      const existing = await Question.findAll({ where: { templateId } });
      const existingIds = existing.map((q) => q.id);

      // ID –∏–∑ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const incomingIds = questions.filter((q) => q.id).map((q) => q.id);

      // ‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      const toDelete = existingIds.filter((id) => !incomingIds.includes(id));
      if (toDelete.length > 0) {
        await Question.destroy({ where: { id: toDelete } });
      }

      // üîÅ –û–±–Ω–æ–≤–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º
      for (const [i, q] of questions.entries()) {
        if (q.id && existingIds.includes(q.id)) {
          // UPDATE
          await Question.update(
            {
              text: q.text,
              type: q.type,
              options: q.options,
              order: i,
            },
            { where: { id: q.id } }
          );
        } else {
          // CREATE
          await Question.create({
            text: q.text,
            type: q.type,
            options: q.options,
            order: i,
            templateId,
          });
        }
      }

      res.json({ message: "–í–æ–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤:", err);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
    }
  }
);

module.exports = router;
